version: '3.8'

services:
  # NEW: Redis for caching
  redis:
    image: redis:7.2-alpine
    container_name: redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --appendfsync everysec
    volumes:
      - redis_data:/data
    networks:
      - asset_network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  # Zookeeper for Kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: zookeeper
    restart: unless-stopped
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data
      - zookeeper_logs:/var/lib/zookeeper/log
    networks:
      - asset_network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Kafka
  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: kafka
    restart: unless-stopped
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_HOST://kafka:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: true
      KAFKA_NUM_PARTITIONS: 3
      KAFKA_DEFAULT_REPLICATION_FACTOR: 1
      KAFKA_LOG_RETENTION_HOURS: 168
      KAFKA_LOG_RETENTION_BYTES: 1073741824
      KAFKA_LOG_SEGMENT_BYTES: 1073741824
      KAFKA_LOG_CLEANUP_POLICY: delete
    ports:
      - "9092:9092"
      - "29092:29092"
    volumes:
      - kafka_data:/var/lib/kafka/data
    networks:
      - asset_network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:9092"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  # Kafka UI for monitoring
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    restart: unless-stopped
    depends_on:
      - kafka
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    ports:
      - "8081:8080"
    networks:
      - asset_network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  postgres:
    image: postgres:15-alpine
    container_name: asset_management_db
    environment:
      POSTGRES_DB: asset_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: iloveyou044
    ports:
      - "5433:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./migrations:/docker-entrypoint-initdb.d
    networks:
      - asset_network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  adminer:
    image: adminer
    container_name: asset_management_adminer
    restart: always
    ports:
      - "8080:8080"
    networks:
      - asset_network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Asset Management API
  asset-api:
    build: .
    container_name: asset_management_api
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=iloveyou044
      - DB_NAME=asset_db
      - DB_SSL_MODE=disable
      - SERVER_PORT=8000
      - JWT_SECRET=your-super-secret-jwt-key-change-in-production-make-it-long-and-random
      - JWT_EXPIRATION=24h
      - GIN_MODE=release
      # Kafka configuration
      - KAFKA_ENABLED=true
      - KAFKA_BROKERS=kafka:29092
      - KAFKA_CONSUMER_GROUP_ID=asset-management-api
      - KAFKA_PRODUCER_RETRY_MAX=3
      - KAFKA_PRODUCER_REQUIRED_ACKS=1
      - KAFKA_PRODUCER_FLUSH_TIMEOUT=5s
      - KAFKA_CONSUMER_SESSION_TIMEOUT=30s
      - KAFKA_CONSUMER_AUTO_COMMIT_INTERVAL=1s
      # NEW: Redis configuration
      - REDIS_ENABLED=true
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=
      - REDIS_DATABASE=0
      - REDIS_POOL_SIZE=10
      - REDIS_MIN_IDLE_CONNS=5
      - REDIS_MAX_RETRIES=3
      - REDIS_RETRY_DELAY=100ms
      - REDIS_POOL_TIMEOUT=4s
      - REDIS_IDLE_TIMEOUT=5m
      - REDIS_IDLE_CHECK_FREQUENCY=1m
      - REDIS_READ_TIMEOUT=3s
      - REDIS_WRITE_TIMEOUT=3s
      - REDIS_DIAL_TIMEOUT=5s
    depends_on:
      kafka:
        condition: service_healthy
      postgres:
        condition: service_started
      redis:
        condition: service_healthy
    networks:
      - asset_network
    volumes:
      - ./logs:/app/logs
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        labels: "service=asset-api"
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Event Consumer Service (separate container for consuming events)
  event-consumer:
    build: .
    container_name: asset_event_consumer
    restart: unless-stopped
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=iloveyou044
      - DB_NAME=asset_db
      - DB_SSL_MODE=disable
      - KAFKA_ENABLED=true
      - KAFKA_BROKERS=kafka:29092
      - KAFKA_CONSUMER_GROUP_ID=asset-event-consumer
      - KAFKA_CONSUMER_SESSION_TIMEOUT=30s
      - KAFKA_CONSUMER_AUTO_COMMIT_INTERVAL=1s
      - REDIS_ENABLED=true
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    command: ["./event-consumer"] # This would be a separate binary for consuming events
    depends_on:
      kafka:
        condition: service_healthy
      postgres:
        condition: service_started
      redis:
        condition: service_healthy
    networks:
      - asset_network
    volumes:
      - ./logs:/app/logs
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        labels: "service=event-consumer"

  # Loki for log aggregation
  loki:
    image: grafana/loki:2.9.0
    container_name: loki
    restart: unless-stopped
    ports:
      - "3100:3100"
    volumes:
      - ./monitoring/loki:/etc/loki
      - loki_data:/loki
    command: -config.file=/etc/loki/loki-config.yml
    networks:
      - asset_network

  # Promtail for log collection
  promtail:
    image: grafana/promtail:2.9.0
    container_name: promtail
    restart: unless-stopped
    volumes:
      - ./monitoring/promtail:/etc/promtail
      - /var/log:/var/log:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - ./logs:/app/logs:ro
    command: -config.file=/etc/promtail/promtail-config.yml
    networks:
      - asset_network
    depends_on:
      - loki

  # Grafana for visualization
  grafana:
    image: grafana/grafana:10.0.0
    container_name: grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
    networks:
      - asset_network
    depends_on:
      - loki

  # Prometheus for metrics
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
    networks:
      - asset_network

volumes:
  postgres_data:
  loki_data:
  grafana_data:
  prometheus_data:
  kafka_data:
  zookeeper_data:
  zookeeper_logs:
  redis_data: # NEW: Redis data volume

networks:
  asset_network:
    driver: bridge